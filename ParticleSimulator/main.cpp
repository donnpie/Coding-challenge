#include "mainwindow.h"
//#include "displaydialog.h"
#include <QApplication>
#include <QDebug>
#include "abstractforcetype.h"
#include "attractforcetype.h"
#include "controller.h"
#include "forcetypefactory.h"
#include "particle.h"
#include "particlefactory.h"
#include "repelforcetype.h"
#include "vector.h"

int main(int argc, char *argv[])
{
//Test code************************************************************************
    QApplication a(argc, argv);  //Need this for error handling code
    MainWindow w(nullptr, 20);
    w.show();
    //w.runSumulation(10);
    //DisplayDialog d;
    //d.show();
    //Test code for Vector class
/*    {
        dp::Vector v1;
        qDebug() << v1;
        dp::Vector v2(3, 4);
        dp::Vector *v3 = new dp::Vector(3, 1);
        v2 = *v3;
        v2.addVector(*v3);
        qDebug() << "v2: " << v2;
        qDebug() << "v3: " << v3;
        qDebug() << "DeltaVector: " << v2.calcDeltaVector(v3);
        qDebug() << "Distance: " << v2.calcDistance(*v3);
        v2.reverseDirection();
        qDebug() << "Reverse: " << v2;
    }
*/

    //Test code for VectorFactory class
/*    {
        VectorFactory vf1;
        dp::Vector *v1;
        v1 = vf1.newVector(1, -1, nullptr);
        qDebug() << "Vector generated by VectorFactory: " << v1;
        delete v1;
    }
*/
    //Test code for AbstractForceType class //Abstract class, so cannot be instantiated directly
    //Test code for AttractForceType class
/*    {
        AttractForceType aft1, aft2;
        aft2 = aft1;
        AttractForceType aft3(aft1);
        aft1.addForceParameter(10);
        aft1.addForceParameter(5);
        qDebug() << "aft1: " << aft1;
    }
*/    //Test code for RepelForceType class
/*    {
        RepelForceType rft1, rft2;
        rft2 = rft1;
        RepelForceType rft3(rft1);
        rft1.addForceParameter(10);
        rft1.addForceParameter(5);
        qDebug() << "rft1: " << rft1;
    }
*/
    //Test code for forceTypeFactory class
/*    {
        ForceTypeFactory ftf1;
        AbstractForceType *aft1 = ftf1.newForceType("Attract");
        AbstractForceType *aft2 = ftf1.newForceType("Repel");
        qDebug() << ftf1 << *aft1 << *aft2;
    }
*/
//Main program*********************************************************************
    w.advance(); //Number of iterations
    //d.runSumulation(3, 10);

    return a.exec();


}
